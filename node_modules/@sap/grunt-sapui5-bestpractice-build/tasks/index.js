'use strict';
var path = require('path');
module.exports = function(grunt) {
	
	var webAppDir = "webapp";
	var tmpDir = "dist/tmp";
	var preloadSources = [
							'**/*.js',
							'**/*.fragment.html',
							'**/*.fragment.json',
							'**/*.fragment.xml',
							'**/*.view.html',
							'**/*.view.json',
							'**/*.view.xml',
							'**/*.properties',
							'manifest.json',
							'!test/**'
						];
	var dbgSources = '**/*.js';

	grunt.initConfig({

		pkg: grunt.file.readJSON('package.json'),

		dir: {
			webapp: 'webapp',
			dist: 'dist',
			root: getRootDir(),
			tmpDir : 'dist/tmp',
			tmpDirDbg : 'dist/tmp-dbg'
		},

		openui5_preload: {
            preloadDbg: {
                options: {
                    resources: {
                        cwd:  '<%= dir.tmpDirDbg %>',
                        src: dbgSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest:  '<%= dir.tmpDirDbg %>'
                },
                components: true
            },
            preloadTmp: {
                options: {
                    resources: {
                        cwd: '<%= dir.tmpDir %>',
                        src: preloadSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest: '<%= dir.tmpDir %>'
                },
                components: true
            }
        },

		clean: {
			dist: '<%= dir.dist %>/'
		},

		copy: {
			copyToDbg: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.webapp %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.webapp %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.webapp %>'
                    }]
            },
            copyToTmp: {
                files: [                	                   {
                        expand: true,
                        src: preloadSources,
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.webapp %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.webapp %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },

                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.webapp %>'
                    },
                    {
                        expand: true,
                        src: 'localService/metadata.xml',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.webapp %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.webapp %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of webapp/test from being copied
							return !filepath.match(new RegExp("(" + webAppDir + "(\\/|\\\\)test|${webAppDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));                        }
                    }]
            },
            copyDbgToDist: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace(/((\.view|\.fragment|\.controller)?\.js)/, '-dbg$1');
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace('.css', '-dbg.css');
                        }
                    }]
            },
            copyTmpToDist: {
                files: [
                    {
                        expand: true,
                        src: 'Component-preload.js',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of webapp/test from being copied
							return !filepath.match(new RegExp("(" + tmpDir + "(\\/|\\\\)test|${tmpDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));        }
                    }]
            }
		},
        mkdir: {
            dist: {
                options: {
                    create: ['<%= dir.dist %>']
                }
            }
        },

        'cssmin': {
            build: {
                files: [
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.webapp %>'
                    }]
            }
        },
        
                
        'uglify': {
            uglifyTmp: {
                files: [
                    {
                        expand: true,
                        src: '**/*.js',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.webapp %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.webapp %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    }]
            },
            uglifyPreload: {
                files: [
                    {
                        expand: true,
                        src: '<%= dir.tmpDir %>' + '/Component-preload.js'
                    }]
            }
        },

        "codevalidation": {
            "di.code-validation.js": {
                options: {
                    projectPath: path.join('<%= dir.webapp %>','..'),
                    ignoredPaths: [path.join('<%= dir.webapp %>','..', 'node_modules'), '<%= dir.dist %>'],
                    reporter: "problems_reporter",
                    reporterOptions: {outputFile: path.join('<%= dir.dist %>' , "di.code-validation.core_issues.json")},
                    validators: {
                        "@sap/di.code-validation.js": {
                            extensions: [".js"]
                        }
                    }
                }
            },
            "di.code-validation.xml": {
                options: {
                    projectPath: path.join('<%= dir.webapp %>','..'),
                    ignoredPaths: [path.join('<%= dir.webapp %>','..', 'node_modules'), '<%= dir.dist %>'],
                    reporter: "problems_reporter",
                    reporterOptions: {outputFile: path.join('<%= dir.dist %>' , "di.code-validation.core_issues.json")},
                    validators: {
                        "@sap/di.code-validation.xml": {
                            extensions: [".xml"]
                        }
                    }
                }
            }
        }
	});
	
	grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-mkdir');
    grunt.loadNpmTasks('grunt-openui5');

	// Linting task
    grunt.registerTask('lint', 'lint project', function () {
        grunt.loadNpmTasks('@sap/di.code-validation.grunt');
        grunt.loadNpmTasks('grunt-mkdir');


        grunt.config("mkdir", {
            tmpDir: {
                options: {
                    create: [tmpDir]
                }
            }
        });

        grunt.registerTask('di.code-validation.js', function () {
            grunt.task.run(['codevalidation:di.code-validation.js']);
        });

        grunt.registerTask('di.code-validation.xml', function () {
            grunt.task.run(['codevalidation:di.code-validation.xml']);

        });

        grunt.task.run([
            'mkdir:tmpDir',
            'di.code-validation.js',
            'di.code-validation.xml'
        ]);
    });	// Linting task

	grunt.registerTask('devx-updateNeoApp', 'Update neo-app for build', function() {
        var bNeoAppExists = grunt.file.exists("neo-app.json");
        if (bNeoAppExists){
			var oNeoAppJsonContent = grunt.file.readJSON("neo-app.json");
			
			var sSourceFolderRelativePath = "/" + grunt.config.data.dir.webapp;
			
			var routes = oNeoAppJsonContent.routes;
			for (var index in routes) {
				//remove source folder from path
				if (routes[index].path.indexOf(sSourceFolderRelativePath) === 0) {
					routes[index].path = routes[index].path.substring(sSourceFolderRelativePath.length);
				}
			}
	
			//Remove source folder in welcome file
			var welcomeFile = oNeoAppJsonContent.welcomeFile;
			if (welcomeFile) {
				if (welcomeFile.indexOf(sSourceFolderRelativePath) === 0) {
					oNeoAppJsonContent.welcomeFile = welcomeFile.substring(sSourceFolderRelativePath.length);
				}
			}
			grunt.file.write(grunt.config.data.dir.dist + "/neo-app.json", JSON.stringify(oNeoAppJsonContent, null, 2));
        }
	});
	
	function getRootDir(){
		var sRes = '<%= pkg.name %>';
		var sComponentFile = webAppDir + "/Component.js";		
		if (grunt.file.exists(sComponentFile)){					
			var fileContent = grunt.file.read(sComponentFile);
			var sReg  = '.extend\\(\\"(.*).';
			var oRegex = new RegExp(sReg + 'Component\\"');
			var aMatches = oRegex.exec(fileContent);
			if (aMatches) {				
				sRes = aMatches[1];
				sRes = sRes.replace(/\./g, "/");
			}
		}		
		return sRes;		
	};

	function getRootDir(){		
		var sRes = '<%= pkg.name %>';
		var sComponentFile = webAppDir + "/Component.js";		
		if (grunt.file.exists(sComponentFile)){					
			var fileContent = grunt.file.read(sComponentFile);
			var sReg  = '.extend\\(\\"(.*).';
			var oRegex = new RegExp(sReg + 'Component\\"');
			var aMatches = oRegex.exec(fileContent);
			if (aMatches) {				
				sRes = aMatches[1];
				sRes = sRes.replace(/\./g, "/");
			}
		}		
		return sRes;		
	};

	function getRootDir(){		
		var sRes = '<%= pkg.name %>';
		var sComponentFile = webAppDir + "/Component.js";		
		if (grunt.file.exists(sComponentFile)){					
			var fileContent = grunt.file.read(sComponentFile);
			var sReg  = '.extend\\(\\"(.*).';
			var oRegex = new RegExp(sReg + 'Component\\"');
			var aMatches = oRegex.exec(fileContent);
			if (aMatches) {				
				sRes = aMatches[1];
				sRes = sRes.replace(/\./g, "/");
			}
		}		
		return sRes;		
	};

	function updateManifestDeploymentBlockUri(oManfiestDeploymentBlock){
		var sManifestUri = oManfiestDeploymentBlock.uri; //current uri in manifest
		var sSourceFolderPathInProject = grunt.config.data.dir.webapp;
		if ((sSourceFolderPathInProject) && sSourceFolderPathInProject !== "") { //when source folder empty (root) - no update needed (paths within target and source are the same)
			var indexOfSourceFolder = sManifestUri.lastIndexOf(sSourceFolderPathInProject); //verify the specified src folder exist in current uri
			if (indexOfSourceFolder !== -1) {
				var sUriPrefix = sManifestUri.substring(0, indexOfSourceFolder); //uri prefix before the source folder path (keep the '/' before the src path)
				var sUpdatedUri = sUriPrefix; //includes the previous prefix (e.g abap path to the application) and the rest is the manifest path within target
				// remove last '/' if exists (e.g - when there is a prefix uri and manifest is directly under target)
				var indexOfLastSlash = sUpdatedUri.lastIndexOf("/");
				if (indexOfLastSlash === sUpdatedUri.length - 1) {
					sUpdatedUri = sUpdatedUri.substring(0, indexOfLastSlash);
				}
				oManfiestDeploymentBlock.uri = sUpdatedUri;
			}
		}
	};
	
	grunt.registerTask('devx-updateManifest', 'Update manifest.json for build', function() {
		grunt.log.writeln('Currently running the "devx-updateManifest" task.');
		var sManifestFile = grunt.config.data.dir.dist + "/manifest.json";
        var bManifestExists = grunt.file.exists(sManifestFile);
        if (bManifestExists){
			var oManifestJsonContent = grunt.file.readJSON(sManifestFile);
			if (oManifestJsonContent["sap.platform.hcp"]) {
				updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.hcp"]);
			}
			if (oManifestJsonContent["sap.platform.abap"]) {
				updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.abap"]);
			}
						
			grunt.file.write(sManifestFile, JSON.stringify(oManifestJsonContent));
        }
	});

	grunt.registerTask('cleanTmp', 'Clean temp data created during the build', function() {
		//delete temp and debug dir
		grunt.file.delete(grunt.config.data.dir.tmpDirDbg);
		grunt.file.delete(grunt.config.data.dir.tmpDir);

	});  	

 	// Build task
	grunt.registerTask('build', ['devx-updateNeoApp', 'devx-updateManifest', "copy:copyToDbg", "copy:copyToTmp", "cssmin", "openui5_preload:preloadTmp", "copy:copyDbgToDist", "uglify:uglifyPreload", "copy:copyTmpToDist", 'cleanTmp']);
	

};
