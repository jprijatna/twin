var expect = require('chai').expect;
var sinon = require('sinon');
var path = require('path');
var assert = require('assert');

var jsonvalidator = require('../src/xmlValidator');
var ValidationMetadata = require("@sap/di.code-validation.core").validationMetadata;
var FileResource = require("@sap/di.code-validation.core").fileResource;

describe('xmlvalidator test', function() {

    var sandbox;
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    function assetInIssues(issues, expectedIssue) {
        var found;
        issues.forEach(function (issue) {
            if (issue.ruleId === expectedIssue.ruleId && issue.column === expectedIssue.column && issue.line === expectedIssue.line) {
                expect(issue).to.deep.equal(expectedIssue);
                found = true;
            }
        });
        if (!found) {
            assert.fail(expectedIssue, issues, "issue not found in result:\n expected \n" + JSON.stringify(expectedIssue) + "\n in \n" + JSON.stringify(issues))
        }
    }

    function assetNotInIssues(issues, expectedIssue) {
        var foundIssue = false;
        issues.forEach(function (issue) {
            if (issue.ruleId === expectedIssue.ruleId) {
                foundIssue = true;
            }
        });
        return !foundIssue;
    }


    it('good xml file', function() {
        var proLocation = path.join(__dirname, "data", "dummyProj");
        var validationMetadata = new ValidationMetadata(proLocation);
        var fileResources = [];
        var fileResource = new FileResource(validationMetadata.getRootPath(), path.join(validationMetadata.getRootPath(), "ok.xml"));
        fileResources.push(fileResource);
        var result = jsonvalidator.validateFiles(validationMetadata, fileResources);
        expect(result).to.exist;
        expect(result.issues).to.exist;
        expect(result.issues).to.have.length(0);
    });

    it('invalid xml file', function() {
        var proLocation = path.join(__dirname, "data", "dummyProj");
        var validationMetadata = new ValidationMetadata(proLocation);
        var fileResources = [];
        var fileResource = new FileResource(validationMetadata.getRootPath(), path.join(validationMetadata.getRootPath(), "wrong.xml"));
        fileResources.push(fileResource);
        var result = jsonvalidator.validateFiles(validationMetadata, fileResources);
        //console.log(JSON.stringify(result));
        expect(result).to.exist;
        expect(result.issues).to.exist;
        expect(result.issues).to.have.length(1);//brings only 1 syntax error per file
        assetInIssues(result.issues, {
            "category" : "Syntax Error",
            "checker" : "",
            "helpUrl" : "",
            "line" : 2,
            "column" : 5,
            "message" : "unclosed xml attribute",
            "path" : fileResource.getPath(),
            "severity" : "error",
            "source" : ""
        });
    });

    afterEach(function () {
        sandbox.restore();
    });

});